/*
	This file is part of Task-Aware MPI and is licensed under the terms contained in the COPYING and COPYING.LESSER files.

	Copyright (C) 2015-2024 Barcelona Supercomputing Center (BSC)
*/

#ifndef OPERATION_MANAGER_HPP
#define OPERATION_MANAGER_HPP

#include <cassert>
#include <mpi.h>

#include "Operation.hpp"
#include "Interface.hpp"
#include "Ticket.hpp"
#include "TicketManager.hpp"
#include "instrument/Instrument.hpp"
#include "util/ArrayView.hpp"
#include "util/ErrorHandler.hpp"

namespace tampi {

//! Class that manages the requests generated by non-blocking operations. It is
//! responsible for inserting the requests and its tickets to the ticket manager
template <typename Lang>
class OperationManager {
private:
	typedef typename Types<Lang>::request_t request_t;
	typedef typename Types<Lang>::status_t  status_t;
	typedef typename Types<Lang>::status_ptr_t status_ptr_t;
	typedef tampi::TicketManager<Lang> TicketManager;
	typedef tampi::Ticket<Lang> Ticket;

public:
	//! \brief Process an task-aware operation by a user task
	//!
	//! An operation can be blocking (pausing the calling task) or non-blocking
	//! (registering an external event on the calling task).
	//!
	//! Once the underlying MPI operation is issued and finished, the status is
	//! saved in the specified location (if any), and the task is resumed or the
	//! external event is fulfilled.
	//!
	//! \param operation The operation to issue
	//! \param blocking Whether the operation is blocking
	//! \param status A pointer to the location where to save the status or
	//!               STATUS_IGNORE if none
	template <typename T>
	static void processOperation(
		T &operation, bool blocking,
		status_ptr_t status = Interface<Lang>::STATUS_IGNORE
	) {
		Instrument::enter<CreateTicket>();

		Ticket ticket(status, blocking);
		ticket.addPendingOperation(1);

		Instrument::exit<CreateTicket>();

		TicketManager &manager = TicketManager::get();
		manager.addTicket(ticket, operation);

		if (blocking) {
			Instrument::Guard<WaitTicket> instrGuard;
			ticket.wait();
		}
	}
};

} // namespace tampi

#endif // OPERATION_MANAGER_HPP
