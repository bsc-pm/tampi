/*
	This file is part of Task-Aware MPI and is licensed under the terms contained in the COPYING and COPYING.LESSER files.

	Copyright (C) 2015-2024 Barcelona Supercomputing Center (BSC)
*/

#ifndef OPERATION_MANAGER_HPP
#define OPERATION_MANAGER_HPP

#include <cassert>
#include <mpi.h>

#include "Allocator.hpp"
#include "Operation.hpp"
#include "Interface.hpp"
#include "Ticket.hpp"
#include "TicketManager.hpp"
#include "instrument/Instrument.hpp"
#include "util/ArrayView.hpp"
#include "util/ErrorHandler.hpp"

namespace tampi {

//! Class that manages the operations generated by user tasks. It is responsible
//! for creating the operation and delegating its processing to the polling task
template <typename Lang, template <typename> typename Op>
class OperationManager {
private:
	typedef typename Types<Lang>::request_t request_t;
	typedef typename Types<Lang>::status_t  status_t;
	typedef typename Types<Lang>::status_ptr_t status_ptr_t;
	typedef tampi::TicketManager<Lang> TicketManager;
	typedef tampi::Ticket<Lang> Ticket;

public:
	//! \brief Process a task-aware operation generated by a user task
	//!
	//! The operation is contructed and delegated to the polling task through
	//! the ticket manager. An operation can be blocking (pausing the calling
	//! task) or non-blocking (registering an external event on the calling
	//! task). The type of the operation is determined by the Op parameter of
	//! the class
	//!
	//! Once the underlying MPI operation is issued and finished, the status is
	//! saved in the specified location (if any), and the task is resumed or the
	//! external event is fulfilled
	//!
	//! \param code The code of the operation: send, recv, etc
	//! \param nature The nature of the operation: blocking or non-blocking
	//! \param args The rest of arguments to construct the operation
	template <typename... Args>
	static void process(OpCode code, OpNature nature, Args &&... args)
	{
		Instrument::Guard<LibraryInterface> instrGuard1;

		// Construct a task context
		TaskContext taskContext(nature == BLK);
		taskContext.bindEvents(1);

		// Allocate and construct the operation
		Op<Lang> *operation = Allocator::alloc<Op<Lang>>(
				taskContext.getTaskHandle(), code, nature,
				std::forward<Args>(args)...);

		// Delegate the processing of the operation
		TicketManager &manager = TicketManager::get();
		manager.addOperation(operation);

		// Wait the operation if it is blocking
		if (taskContext.isBlocking()) {
			Instrument::Guard<WaitTicket> instrGuard2;
			taskContext.waitEventsCompletion();
		}
	}
};

} // namespace tampi

#endif // OPERATION_MANAGER_HPP
